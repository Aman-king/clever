/**
 * Clever programming language
 * Copyright (c) Clever Team
 *
 * This file is distributed under the MIT license. See LICENSE for details.
 */

//  The Wild X Adventures
//  by: Pericles Lopes Machado

// GAME CONTROL

/*=============================================================*/

import std.math.*;
import gui.ncurses.*;
import engine.paint.*;
import std.io.*;
import std.concurrent.*;
import std.sys.*;
import std.collection.*;

/* 
 score = no + 2 * nS + 3 * nP
 no = Number of 'o'
 nS = Number of '$'
 nP = Number of '*'

 nM = Number of '+'
monsters '+'
*/

class Score {
	var moves, no, nS, nP, nA, score;

	function Score(moves_, no_, nS_, nP_, nA_, score_) {
		this.moves = moves_;
		this.no = no_;
		this.nS = nS_;
		this.nP = nP_;
		this.nA = nA_;
		this.score = score_;
	}

	function update() {
		this.score = this.no + 2 * this.nS + 3 * this.nP + 4 * this.nA;
	}
}


/*=============================================================*/
class Point {
	var x, y;

	function Point(x_, y_) {
		this.x = x_;
		this.y = y_;
	}
}


/*=============================================================*/
/*
Player class
p is the player position in the grid
score is the game score of this player
*/
class Player {
	var p, score;

	function Player(p_, score_) {
		this.p = p_;
		this.score = score_;
	}
}

/*=============================================================*/
/*
This class control a game instance
*/

class Pair {
	var x, y;
	var d;

	function Pair(px_, py_, d_) {
		this.x = px_;
		this.y = py_;
		this.d = d_;
	}
}

function pair_cmp(a, b) 
{
	if (a.d == b.d) {
		if (a.x == b.x) {
			return a.y > b.y;
		}
		return a.x > b.x;
	}
	return a.d > b.d;
}

function dist(a, b) 
{
	return abs(a.x - b.x) + abs(a.y - b.y);
}

const INF  = 1 << 20;

function read_keys(gh)
{
	var ok = true;
	while (gh.sync.status()) {
		gh.readInputs();
	}
}

function render(gh)
{
	var ok = true;
	
	while (gh.sync.status()) {		
		if (gh.sync.getID() == 0) {
			gh.getInputs();

			/*Print messages*/
			gh.updateScore();
			gh.draw();
			gh.printInfos();				
			
			ok = gh.isRunning();		
			
			if (!ok) { gh.sync.setStatus(false); }
			gh.mw.sleep();
			gh.sync.nextID();			
		}
	}
}

function make_moves(gh)
{
	var ok = true;
	var st = 0.5;
	var tini = microtime();

	while (gh.sync.status()) {
		if (gh.sync.getID() == 1) {
			var tfim = microtime();
			if (tfim - tini > st) {
				var i = 0;

				for (var v in gh.monsters) {
					
					gh.monster_control(i);

					ok = gh.isRunning();
				
					if (!ok) { gh.sync.setStatus(false); break; }
			
					++i;
				}

				tini = tfim;
			}
			gh.mw.sleep();
			gh.sync.nextID();
		}
	}
}


class Game {
	/* Grid */
	var grid, n, m;
	var keyQ;

	/* Grid position */
	var x0, y0;

	/* colors */
	var colors;
	var colorst;

	/* Number of special objects */
	var n0o, nSo, nPo, nAo;

	var player;

	/* Initial position */
	var p0;

	/* "Graphical" engine handler */
	var mw;

	/* View ratio */
	var r;

	/* I/O data*/
	var last_key;
	var mutex;

	/* Monsters */
	var nM;
	var monsters;
	var monsters_control;
	var sleep_time;
	var sync;


/****************************************************************************/
	function isValidPos(i, j) {
		if (i < this.n && i >= 0 && j < this.m && j >= 0) {
			return true;
		} else {
			return false;
		}
	}

/****************************************************************************/
	function initMonsters() {
		this.monsters = [];
		this.monsters_control = [];

		for (var i = 0; i < this.n; ++i) {
			for (var j = 0; j < this.m; ++j) {
				if (this.grid[i][j] == '+') {
					this.monsters.append([i, j]);
				}
			}
		}
	}

/****************************************************************************/
	function Game(grid_, n_, m_, x0_, y0_, r_, sleep_time_) {
		this.grid = grid_;
		this.n = n_;
		this.m = m_;
		this.keyQ = Queue.new();
		this.mutex = Mutex.new();

		this.r = r_;

		this.sleep_time = sleep_time_;
		this.initMonsters();
		this.sync = Sync.new(2);

		this.x0 = x0_;
		this.y0 = y0_;
	
		this.n0o = 0; 
		this.nSo = 0; 
		this.nPo = 0;
		this.nAo = 0;

		/* This game use NCurses as graphical engine*/
		this.mw = NCurses.new(true, 30);

		/* Enable key reading */
		this.mw.noEcho(); 
		this.mw.enableKeyPad();
	
		init_pallete(this.mw);

		/* Object colors*/
		this.colors =  {'x' : 1, '*' : 2, '$' : 3, 'o' : 4,  '#' : 17, '.' : 16, '@': 14, '-': 15, '+' : 1};
		this.colorst = {'x' : 7, '*' : 8, '$' : 10, 'o' : 9, '#' : 17, '.' : 16, '@': 13, '-': 15, '+' : 7};

		this.last_key = Key.new(0);
	}

/****************************************************************************/
	/* Get user inputs*/
	function getInputs() {
		this.mutex.lock();
		if (this.keyQ.empty()) {
			this.last_key = Key.new(0);
		} else {
			this.keyQ.pop();
		}
		this.mutex.unlock();
	}

	function readInputs() {
		var k = this.mw.getKey();

		this.mutex.lock();
		this.last_key = k;
		if (this.keyQ.empty()) {
			this.keyQ.push(k);
		}
		this.mutex.unlock();
	}

/****************************************************************************/
	/* Start game with n_moves */
	function start(n_moves) {
		var px, py;

		for (var i = 0; i < this.n; ++i) {
			for (var j = 0; j < this.m; ++j) {
				switch (this.grid[i][j]) {
					case'x':
						px = i;
						py = j;
					break;

					case 'o':
						++this.n0o;
					break;

					case '*':
						++this.nSo;
					break;
					
					case '$':
						++this.nPo;
					break;

					case '@':
						++this.nAo;
					break;
				}
			}
		}

		this.p0 = Point.new(px, py);

		this.player = Player.new(Point.new(this.p0.x, this.p0.y), Score.new(n_moves, 0, 0, 0, 0, 0));
	}

/****************************************************************************/
	/* Finish game */
	function finish() {
		this.mw.setColor(8);
		this.mw.addStr(this.x0 - 3, 2, "GAME OVER!");

		this.mw.setColor(2);
		this.mw.addStr(this.n + this.x0 + 1, 2, "Press 'ctrl+C' to exit.");

		wait(this.mw, 113);
	}

/****************************************************************************/
	/* Print title*/
	function title() {
		this.mw.setColor(7);
		this.mw.addStr(0, 0, "The Wild X");

		this.mw.setColor(2);
		this.mw.addStr(this.n + this.x0 + 1, 2, "Press 'ctrl+C' to quit.");
	}

/****************************************************************************/
	/* Paint game grid */
	function paint() {
		for (var i = 0; i < this.grid.size(); ++i) {
			for (var j = 0; j < this.grid[i].size(); ++j) {
				var c = this.grid[i][j];

				this.mw.setColor(this.colors[c]);
				this.mw.addChar(i + this.x0, j + this.y0, c); 
			}
		}
	}

/****************************************************************************/
	/* 
		Check if game is running
		Game stops if last_key is 'q' or if moves == 0 or
		there aren't special objects in the grid
	*/
	function isRunning() {
		this.mutex.lock();
		var status = this.last_key.getChar() != 'q' && 
				this.player.score.moves > 0 &&
			   (this.n0o + this.nPo + this.nSo) != 0;
		this.mutex.unlock();
		return status;
	}

/****************************************************************************/
	/* Update player decision */
	function updatePlayer() {
		var px = this.player.p.x;
		var py = this.player.p.y;

		this.grid[px].setChar(py, '.');

		this.mw.setColor(this.colors['.']);
		this.mw.addChar(px + this.x0, py + this.y0, '.');

		this.mutex.lock();
		var kk = this.last_key.getInt();
		this.mutex.unlock();

		switch (kk) {
			case NCurses.KEY_LEFT:
				if (this.grid[px][(this.m + py - 1) % this.m] != '#') {
					py = (this.m - 1 + py) % this.m;
				}
			break;

			case NCurses.KEY_RIGHT:
				if (this.grid[px][(py + 1) % this.m] != '#') {
					py = (py + 1) % this.m;
				}
			break;

			case NCurses.KEY_UP:
				if (this.grid[(this.n + px - 1) % this.n][py] != '#') {
					px = (this.n - 1 + px) % this.n;			
				}
			break;

			case NCurses.KEY_DOWN:
				if (this.grid[(px + 1) % this.n][py] != '#') {
					px = (px + 1) % this.n;
				}
			break;

			case NCurses.KEY_HOME:
				px = this.p0.x;
				py = this.p0.y;
			break;
		}
		
		--this.player.score.moves;

		if (this.grid[px][py] == '+') {
			this.player.score.moves = 0;
		} else {
			this.player.p.x = px;
			this.player.p.y = py;
		}		
	}


/****************************************************************************/
	/* Update player score*/
	function updateScore() {
		/* Update player decision */				
		this.updatePlayer();

		var px = this.player.p.x;
		var py = this.player.p.y;

		switch (this.grid[px][py]) {
			case 'o':
				++this.player.score.no;
				this.n0o--;
			break;

			case '$':
				++this.player.score.nS;
				this.nSo--;
			break;

			case '*':
				++this.player.score.nP;
				this.nPo--;
			break;

			case '@':
				++this.player.score.nA;
				this.nAo--;
			break;
		}

		this.player.score.update();
	}

/****************************************************************************/
	/* Draw grid */
	function draw() {
		var px = this.player.p.x;
		var py = this.player.p.y;

		this.grid[px].setChar(py, 'x');

		this.mw.setColor(this.colors['x']);
		this.mw.addChar(px + this.x0, py + this.y0, 'x');
		this.mw.refresh();

		print_info(this.mw, "Position player: ", "(" + py + ", " + px + ")   ", this.n + this.x0 + 3,  2, 12, 10);
	}

/****************************************************************************/
	/* Print infos */
	function printInfos() {
		print_info(this.mw, "Score: ", this.player.score.score + "  ", this.x0 - 2,  2, 12, 8);

		print_info(this.mw, "Moves: ",  this.player.score.moves + "  ", this.n + this.x0 + 4,  2, 12, 10);

		print_score(this.mw, this.colorst, 'o', this.player.score.no, this.x0 - 2, 15, 12);
		print_score(this.mw, this.colorst, '$', this.player.score.nS, this.x0 - 2, 25, 12);
		print_score(this.mw, this.colorst, '*', this.player.score.nP, this.x0 - 2, 35, 12);
		print_score(this.mw, this.colorst, '@', this.player.score.nA, this.x0 - 2, 45, 12);
	}

/****************************************************************************/
	/* Run game */
	var m_id;
	function render() {
		/* Paint grid */
		this.paint();
		this.draw();

		/*Print messages*/
		this.printInfos();
	}

	function monster_control(ii)
	{
		var monster = this.monsters[ii];
		var dx = [-1, 1,  0, 0];
		var dy = [ 0, 0, -1, 1];
		var px = monster[0], py = monster[1];

		var ppx = this.player.p.x;
		var ppy = this.player.p.y;

		for (var i = 0; i < this.n; ++i) {
			for (var j = 0; j < this.m; ++j) {
				this.d[i][j] = INF;
				this.pi[i][j] = Point.new(-1, -1);
			}
		}

		if (px < 0 || py < 0) { return; }

		this.d[px][py] = 0;

		var q = PriorityQueue.new(pair_cmp);
		var s = Point.new(px, py);
		var t = Point.new(ppx, ppy);
		var r = Point.new(-1, -1);

		q.push(Pair.new(px, py, this.d[px][py] + dist(s, t)));

		while (!q.empty()) {
			var ux = q.top().x;
			var uy = q.top().y; 
			var u = Point.new(ux, uy);			
			q.pop();

			if (ux == t.x && uy == t.y) {
				break;
			}


			for (var i = 0; i < 4; ++i) {
				var vx = (this.n + ux + dx[i]) % this.n;
				var vy = (this.m + uy + dy[i]) % this.m;
				var v = Point.new(vx, vy);

				if (this.d[vx][vy] > this.d[ux][uy] + 1 && 
					this.grid[vx][vy] != '#' && 
					this.grid[vx][vy] != '+') {
					q.push(Pair.new(vx, vy, this.d[ux][uy] + 1  + dist(v, t)));
					this.d[vx][vy] = this.d[ux][uy] + 1;
					this.pi[vx][vy] = Point.new(ux, uy);
				}
			}
		}

		var pip = Point.new(t.x, t.y);

		while (pip.x != -1) {
			var pipn = this.pi[pip.x][pip.y];

		
			if (pipn.x == s.x && pipn.y == s.y) {
				r.x = pip.x; r.y = pip.y;
				break;
			}
			pip = pipn;
		}
	
		if (px > -1 && px < this.n && py > -1 && py < this.m &&
			r.x > -1 && r.x < this.n && r.y > -1 && r.y < this.m) {
			this.grid[px].setChar(py, '.');
			this.grid[r.x].setChar(r.y, '+');

			this.mw.setColor(this.colors['.']);
			this.mw.addChar(px + this.x0, py + this.y0, '.');
			this.mw.refresh();

			this.mw.setColor(this.colors['+']);
			this.mw.addChar(r.x + this.x0, r.y + this.y0, '+');
			this.mw.refresh();
		}
	
		px = r.x;
		py = r.y;

		if (px == t.x && py == t.y) {
			this.player.score.moves = 0;
		}

		this.monsters[ii] = [px, py];
		this.mw.addStr(ii + 5, this.m + 5, px + ", " + px);
	}

	var d, pi;

	//n, m, grid, p0, monster, player, sync, d, pi, mw,
	function run() {

		/*Init distance matrix and pi-code matrix*/
		this.d = [];
		this.pi = [];

		for (var i = 0; i < this.n; ++i) {
			this.d.append([]);
			this.pi.append([]);
			for (var j = 0; j < this.m; ++j) {
				this.d[i].append(INF);
				this.pi[i].append(Point.new(-1, -1));
			}
		}

		/* Print title*/
		this.title();

		/* The render loop */
		var ai_ = Thread.new(make_moves, this);
		var keys_ = Thread.new(read_keys, this);
		var render_ = Thread.new(render, this);

		this.render();

		ai_.start();
		render_.start();
		keys_.start();

		ai_.wait();
		render_.wait();
		keys_.wait();

		/* Finish game*/
		this.finish();
		this.mw.exit();
	}
}

