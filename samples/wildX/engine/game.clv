/**
 * Clever programming language
 * Copyright (c) Clever Team
 *
 * This file is distributed under the MIT license. See LICENSE for details.
 */

//  The Wild X Adventures
//  by: Pericles Lopes Machado

// GAME CONTROL

/*=============================================================*/

import std.math.*;
import gui.ncurses.*;
import engine.paint.*;
import std.io.*;
import std.concurrent.*;
import std.sys.*;

/* 
 score = no + 2 * nS + 3 * nP
 no = Number of 'o'
 nS = Number of '$'
 nP = Number of '*'

 nM = Number of '+'
monsters '+'
*/

class Score {
	var moves, no, nS, nP, nA, score;

	function Score(moves_, no_, nS_, nP_, nA_, score_) {
		this.moves = moves_;
		this.no = no_;
		this.nS = nS_;
		this.nP = nP_;
		this.nA = nA_;
		this.score = score_;
	}

	function update() {
		this.score = this.no + 2 * this.nS + 3 * this.nP + 4 * this.nA;
	}
}


/*=============================================================*/
class Point {
	var x, y;

	function Point(x_, y_) {
		this.x = x_;
		this.y = y_;
	}
}


/*=============================================================*/
/*
Player class
p is the player position in the grid
score is the game score of this player
*/
class Player {
	var p, score;

	function Player(p_, score_) {
		this.p = p_;
		this.score = score_;
	}
}

/*=============================================================*/
/*
This class control a game instance
*/

function monster_control(gh, monster)
{
	var st = 500;
	var id = gh.sync.nextID();
	var tini = microtime();

	st = gh.sleep_time;

	while (gh.sync.status()) {
		if (id == gh.sync.getID()) {
			var tfim = microtime();
			if (tfim - tini > st) {
				tini = tfim;
			} 

			gh.sync.nextID();
			sleep(50);
		}
	}
}

class Game {
	/* Grid */
	var grid, n, m;
	var visited;

	/* Grid position */
	var x0, y0;

	/* colors */
	var colors;
	var colorst;

	/* Number of special objects */
	var n0o, nSo, nPo, nAo;

	var player;

	/* Initial position */
	var p0;

	/* "Graphical" engine handler */
	var mw;

	/* View ratio */
	var r;

	/* I/O data*/
	var last_key;

	/* Monsters */
	var nM;
	var monsters;
	var monsters_control;
	var sleep_time;
	var sync;

/****************************************************************************/
	function initVisited() {
		this.visited = [];

		for (var i = 0; i < this.n; ++i) {
			this.visited.append([]);

			for (var j = 0; j < this.m; ++j) {
				this.visited[i].append(false);
			}
		}
	}

/****************************************************************************/
	function isVisited(i, j) {
		if (i < this.n && i >= 0 && j < this.m && j >= 0) {
			return this.visited[i][j];
		} else {
			return false;
		}
	}

/****************************************************************************/
	function isValidPos(i, j) {
		if (i < this.n && i >= 0 && j < this.m && j >= 0) {
			return true;
		} else {
			return false;
		}
	}

/****************************************************************************/
	function updateVisited(ux, uy) {
		for (var i = -this.r; i <= this.r; ++i) {
			for (var j = -this.r; j <= this.r; ++j) {
				var px = ux + i;
				var py = uy + j;

				if (this.isValidPos(px, py) && (i * i + j * j) <= this.r * this.r) {
					this.visited[px][py] = true;
				}
			}
		}
	}

/****************************************************************************/
	function initMonsters() {
		this.monsters = [];
		this.monsters_control = [];

		for (var i = 0; i < this.n; ++i) {
			for (var j = 0; j < this.m; ++j) {
				if (this.grid[i][j] == '+') {
					this.monsters.append([[i, j]]);
					this.monsters_control.append(Thread.new(monster_control, this, [i, j]));
				}
			}
		}
	}

/****************************************************************************/
	function Game(grid_, n_, m_, x0_, y0_, r_, sleep_time_) {
		this.grid = grid_;
		this.n = n_;
		this.m = m_;

		this.r = r_;

		this.initVisited();

		this.sleep_time = sleep_time_;
		this.initMonsters();
		this.sync = Sync.new(1 + this.monsters.size());

		this.x0 = x0_;
		this.y0 = y0_;
	
		this.n0o = 0; 
		this.nSo = 0; 
		this.nPo = 0;
		this.nAo = 0;

		/* This game use NCurses as graphical engine*/
		this.mw = NCurses.new(true, 10000);

		/* Enable key reading */
		this.mw.noEcho(); 
		this.mw.enableKeyPad();
	
		init_pallete(this.mw);

		/* Object colors*/
		this.colors =  {'x' : 1, '*' : 2, '$' : 3, 'o' : 4,  '#' : 17, '.' : 16, '@': 14, '-': 15, '+' : 1};
		this.colorst = {'x' : 7, '*' : 8, '$' : 10, 'o' : 9, '#' : 17, '.' : 16, '@': 13, '-': 15, '+' : 7};

		this.last_key = Key.new(0);
	}

/****************************************************************************/
	/* Get user inputs*/
	function getInputs() {
		this.last_key = this.mw.getKey();
	}

/****************************************************************************/
	/* Start game with n_moves */
	function start(n_moves) {
		var px, py;

		for (var i = 0; i < this.n; ++i) {
			for (var j = 0; j < this.m; ++j) {
				switch (this.grid[i][j]) {
					case'x':
						px = i;
						py = j;
					break;

					case 'o':
						++this.n0o;
					break;

					case '*':
						++this.nSo;
					break;
					
					case '$':
						++this.nPo;
					break;

					case '@':
						++this.nAo;
					break;
				}
			}
		}

		this.p0 = Point.new(px, py);

		this.player = Player.new(Point.new(this.p0.x, this.p0.y), Score.new(n_moves, 0, 0, 0, 0, 0));
		this.updateVisited(px, py);
	}

/****************************************************************************/
	/* Finish game */
	function finish() {
		this.mw.setColor(8);
		this.mw.addStr(this.x0 - 3, 2, "GAME OVER!");

		this.mw.setColor(2);
		this.mw.addStr(this.n + this.x0 + 1, 2, "Press 'q' to exit.");

		wait(this.mw, 113);
	}

/****************************************************************************/
	/* Print title*/
	function title() {
		this.mw.setColor(7);
		this.mw.addStr(0, 0, "The Wild X");

		this.mw.setColor(2);
		this.mw.addStr(this.n + this.x0 + 1, 2, "Press 'q' to quit.");
	}

/****************************************************************************/
	/* Paint game grid */
	function paint() {
		for (var i = 0; i < this.grid.size(); ++i) {
			for (var j = 0; j < this.grid[i].size(); ++j) {
				var c = this.grid[i][j];

				if (this.isVisited(i, j)) {
					this.mw.setColor(this.colors[c]);
					this.mw.addChar(i + this.x0, j + this.y0, c);
				} 
			}
		}
	}

/****************************************************************************/
	/* 
		Check if game is running
		Game stops if last_key is 'q' or if moves == 0 or
		there aren't special objects in the grid
	*/
	function isRunning() {
		return  this.last_key.getChar() != 'q' && 
				this.player.score.moves > 0 &&
			   (this.n0o + this.nPo + this.nSo) != 0;
	}

/****************************************************************************/
	/* Update player decision */
	function updatePlayer() {
		var px = this.player.p.x;
		var py = this.player.p.y;

		this.grid[px] = this.grid[px].replace('x', '.');

		switch (this.last_key.getInt()) {
			case NCurses.KEY_LEFT:
				if (this.grid[px][(this.m + py - 1) % this.m] != '#') {
					py = (this.m - 1 + py) % this.m;
				}
			break;

			case NCurses.KEY_RIGHT:
				if (this.grid[px][(py + 1) % this.m] != '#') {
					py = (py + 1) % this.m;
				}
			break;

			case NCurses.KEY_UP:
				if (this.grid[(this.n + px - 1) % this.n][py] != '#') {
					px = (this.n - 1 + px) % this.n;			
				}
			break;

			case NCurses.KEY_DOWN:
				if (this.grid[(px + 1) % this.n][py] != '#') {
					px = (px + 1) % this.n;
				}
			break;

			case NCurses.KEY_HOME:
				px = this.p0.x;
				py = this.p0.y;
			break;
		}
		
		--this.player.score.moves;

		if (this.grid[px][py] == '+') {
			this.player.score.moves = 0;
		} else {
			this.player.p.x = px;
			this.player.p.y = py;
			this.updateVisited(px, py);
		}		
	}


/****************************************************************************/
	/* Update player score*/
	function updateScore() {
		/* Update player decision */				
		this.updatePlayer();

		var px = this.player.p.x;
		var py = this.player.p.y;

		switch (this.grid[px][py]) {
			case 'o':
				++this.player.score.no;
				this.n0o--;
			break;

			case '$':
				++this.player.score.nS;
				this.nSo--;
			break;

			case '*':
				++this.player.score.nP;
				this.nPo--;
			break;

			case '@':
				++this.player.score.nA;
				this.nAo--;
			break;
		}

		this.player.score.update();
	}

/****************************************************************************/
	/* Draw grid */
	function draw() {
		var px = this.player.p.x;
		var py = this.player.p.y;
		var l = "";

		for (var i = 0; i < this.m; ++i) {
			if (i == py) {
				l = l + 'x';
			} else {
				l = l + this.grid[px][i];
			}
		}
		this.grid[px] = l;

		print_info(this.mw, "Position player: ", "(" + py + ", " + px + ")   ", this.n + this.x0 + 3,  2, 12, 10);
	}

/****************************************************************************/
	/* Print infos */
	function printInfos() {
		print_info(this.mw, "Score: ", this.player.score.score + "  ", this.x0 - 2,  2, 12, 8);

		print_info(this.mw, "Moves: ",  this.player.score.moves + "  ", this.n + this.x0 + 4,  2, 12, 10);

		print_score(this.mw, this.colorst, 'o', this.player.score.no, this.x0 - 2, 15, 12);
		print_score(this.mw, this.colorst, '$', this.player.score.nS, this.x0 - 2, 25, 12);
		print_score(this.mw, this.colorst, '*', this.player.score.nP, this.x0 - 2, 35, 12);
		print_score(this.mw, this.colorst, '@', this.player.score.nA, this.x0 - 2, 45, 12);
	}

/****************************************************************************/
	/* Run game */
	var m_id;

	function run() {

		/* Print title*/
		this.title();

		/* The render loop */		
		var id = this.sync.nextID();
		this.m_id = id;

		this.monsters_control.each(
			function(z) {
				z.start();
			}
		);

		while (this.sync.status()) {
			if (id == this.sync.getID()) {
				/* Update player score*/
				this.updateScore();
		
				/* Draw grid */
				this.draw();

				/* Paint grid */
				this.paint();

				/*Print messages*/
				this.printInfos();
		
				/*Get a new key*/	
				this.getInputs();
				
				var ok = this.isRunning();

				this.sync.setStatus(ok);
				this.sync.nextID();
			}
		}

		/* Finish game*/
		this.finish();

		this.monsters_control.each(
			function(z) {
				z.wait();
			}
		);

		this.mw.exit();
	}
}

