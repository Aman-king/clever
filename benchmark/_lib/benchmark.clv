import std.io.*;
import std.regex.*;
import std.file.*;
import std.sys.*;

function _exec(command)
{
    var output_file = ".bench-output";
    var cmd = command + " > " + output_file + " 2>&1";
    var rs = system(cmd);
        
    if (rs != 0) {
        remove(output_file);
        return false;
    }
        
    var f = File.new(output_file, File.IN),
        buffer = '';
    
    while (!f.eof()) {
        buffer = buffer + f.readLine() + "\n";
    }
    f.close();
    
    remove(output_file);
    
    return buffer;
}

class Language
{
	var name;
	var command;
    var check_cmd;
    var version_er;
	var extension;
    var version;
    var is_ok;
    
    function Language(name, command, check_cmd, version_er, extension)
    {
		this.name = name;
		this.command = command;
        this.check_cmd = check_cmd;
        this.version_er = version_er;
		this.extension = extension;
        this.is_ok = false;
    }
    
    function check() {
        //var version_str = _exec(this.check_cmd);
        var output_file = ".bench-output";
        var cmd = this.check_cmd + " > " + output_file + " 2>&1";
        var rs = system(cmd);
        
        if (rs != 0) {
            remove(output_file);
            return false;
        }
        
        var f = File.new(output_file, File.IN);
        var version_str = '';
        while (!f.eof()) {
            version_str = version_str + f.readLine();
			if (!f.eof()) {
				version_str = version_str + "\n";
			}
        }
        f.close();
        remove(output_file);
        
        var re = Regex.new(this.version_er);
        if (!re.match(version_str)) {
        	return false;
        }
        
        this.version = re.group(1);
        this.is_ok = true;
        
        return true;
    }
}

class GroupTest
{
	var path;
	var info;
	var env;
	var files;
	
	function GroupTest(env, path, info)
	{
		this.env = env;
		this.info = info;
		this.path = path;
	}
}

class Environment
{
	var basePath;
	var langs;
	var groups;

	function Environment(base_path)
	{
		this.basePath = base_path;
		this.langs = [];
		this.groups = [];
		this.addLanguage('Clever', '/Users/eu/src/cleverclever', '/Users/eu/src/clever/clever -v', '^Clever - (.*)', 'clv');
	}

	function addLanguage(name, command, check_cmd, version_er, extension)
	{
		var l = Language.new(name, command, check_cmd, version_er, extension);

		this.langs.append(l);

		return l;
	}
	
	function bootstrap()
	{
		this.checkProgLangs();
		this.loadGroupTests();
	}
    
    function checkProgLangs()
	{
        this.langs.each(function(l) {
            l.check();
        });
    }
	
	function loadGroupTests()
	{
		var path = this.basePath + '/tests';
		
		glob(path + '/*').each(function(group_dir) {
			var info_file = group_dir + "/info.txt";
			
			if (!file_exists(info_file)) {
				return;
			}
			
			var info = this._readFileContent(info_file);
			var group = GroupTest.new(this, group_dir, info);
			this.groups.append(group);
		});
	}
	
	function _readFileContent(file)
	{
	    var f = File.new(file, File.IN),
	        buffer = '';
    
	    while (!f.eof()) {
	        buffer = buffer + f.readLine();
			if (!f.eof()) {
				buffer = buffer + "\n";
			}
	    }
	    f.close();
		
		return buffer;
	}
}
