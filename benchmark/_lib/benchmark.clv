import std.io.*;
import std.regex.*;
import std.file.*;
import std.sys.*;

//import classes.language.*; -- BUG, import dentro de import nao altera o basePath... dae nao acha o novo arquivo.

function readFileContent(file)
{
	var f = File.new(file, File.IN);
    var buffer = '';
    
    while (!f.eof()) {
        buffer = buffer + f.readLine();
		if (!f.eof()) {
			buffer = buffer + "\n";
		}
    }
    f.close();
		
	return buffer;
}

function _exec(command)
{
    var output_file = ".bench-output";
    var cmd = command + " > " + output_file + " 2>&1";
    var rs = system(cmd);

    if (rs != 0) {
        remove(output_file);
        return false;
    }

    var buffer = readFileContent(output_file);
    remove(output_file);

    return buffer;
}

class Language
{
	var name;
	var command;
    var check_cmd;
    var version_er;
	var extension;
    var version;
    var is_ok;

    function Language(name, command, check_cmd, version_er, extension)
    {
		this.name = name;
		this.command = command;
        this.check_cmd = check_cmd;
        this.version_er = version_er;
		this.extension = extension;
        this.is_ok = false;
    }

    function check() {
        var version_str = _exec(this.check_cmd);
        var re = Regex.new(this.version_er);
        if (!re.match(version_str)) {
        	return false;
        }

        this.version = re.group(1);
        this.is_ok = true;

        return true;
    }
}


class GroupTest
{
	var path;
	var info;
	var env;
	var test_files;
	
	function GroupTest(env, path, info)
	{
		this.env = env;
		this.info = info;
		this.path = path;
		
		this.loadTests();
	}
	
	function loadTests()
	{
		this.test_files = [];
		
		var files = glob(this.path + '/*');
		
		var i = 0;
		files.each(this.checkFile);
	}
	
	function checkFile(file)
	{
		if (basename(file) == 'info.txt') {
			return;
		}
		
		this.test_files.append(file);
	}
	
	function getExtension(file)
	{
		println(this);
        var re = Regex.new("\.(.*?)$");
        if (!re.match(file)) {
        	return false;
        }
		
		println(re.group(1));
	}
}

class Environment
{
	var basePath;
	var langs;
	var groups;

	function Environment(base_path)
	{
		this.basePath = base_path;
		this.langs = [];
		this.groups = [];
	}

	function addLanguage(name, command, check_cmd, version_er, extension)
	{
		var l = Language.new(name, command, check_cmd, version_er, extension);

		this.langs.append(l);

		return l;
	}
	
	function bootstrap()
	{
		this.checkProgLangs();
		this.loadGroupTests();
	}
    
    function checkProgLangs()
	{
        this.langs.each(function(l) {
            l.check();
        });
    }
	
	function loadGroupTests()
	{
		var path = this.basePath + '/tests',
			tests_dir = glob(path + '/*'),
			super = this;
		
		var i = 0;
		while (i < tests_dir.size()) {
			var group_dir = tests_dir[i],
				info_file = group_dir + "/info.txt";
			
			i++;
			if (!file_exists(info_file)) {
				continue;
			}
			
			var info = readFileContent(info_file);
			var group = GroupTest.new(this, group_dir, info);
			this.groups.append(group);
		}
	}
}