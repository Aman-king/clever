import std.io;
import std.file;
import std.sys;
import std.regex;

function readfile(file) {
	var fs  = file:File.new(file, file:File.IN);
	var str = '';

	while (!fs.eof()) {
		str += fs.readLine() + "\n";
	}

	fs.close();

	return str;
}

function runcode(file, code) {
	var tmp = file:File.new(file, file:File.OUT);

	tmp.write(code);

	tmp.close();

	sys:system("./clever " + file + " > " + file + ".out 2>&1");

	return readfile(file + ".out");
}

function runtest(file) {
	var content = readfile(file);
	var title_re = regex:Regex.new("[^\r\n]+");

	if (title_re.match(content)) {
		var title = title_re.group(0) + " (" + file + ") ";
		var code_re = regex:Regex.new("==CODE==((?s:(?!==RESULT==).)+)");

		io:print("\r[....] " + title);
		io:flush();

		if (code_re.match(content)) {
			var ts1 = sys:microtime();
			var result = runcode(file + ".tmp", code_re.group(1));
			var ts2 = sys:microtime();
			var result_re = regex:Regex.new("==RESULT==((?s:.*))");

			result_re.match(content);

			var rtrim = regex:Regex.new("^\s*|\s*$");
			var result_re2 = regex:Regex.new(rtrim.replaceAll('', result_re.group(1)));

			if (result_re2.test(rtrim.replaceAll('', result))) {
				io:print("\r[PASS] " + title + " - " + (ts2 - ts1) + " ms");
			} else {
				io:print("\r[FAIL] " + title + " - " + (ts2 - ts1) + " ms");
			}
		}
	}
	io:println("");
}

var test_dirs = file:glob("tests/*");

for (var dir in test_dirs) {
	var files = file:glob(dir + "/*.test");

	files.each(runtest);
}
