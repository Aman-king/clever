#!../../clever

/**
 * Clever programming language
 * Copyright (c) Clever Team
 *
 * This file is distributed under the MIT license. See LICENSE for details.
 */

/*
Syncronization test using NCurses and Clever threads
*/

import std.sys.*;
import std.io.*;
import std.concurrent.*;

import gui.ncurses.*;

function print_time(mw, x, y, t, sync)
{
	var t_start = t.startTime();
	var id = sync.getId();

	while (sync.ok()) {
		if (id == sync.next_id) {
			var t_now = microtime();
			mw.printStr(x, y, "Time:   " + (t_now - t_start) + 
                              "   id: " + id + "                   ");
			mw.refresh();			
			sync.next_id = (sync.next_id + 1) % sync.n_ids;
			mw.sleep();	
		}	
	}
}

function get_key(mw, sync) 
{
	var ch;

	while ((ch = mw.getKey().getChar()) != 'q') {
		
	}

	sync.nok();
}


class Time {
	var delay;

	function Time(delay) { this.delay = delay; }

	function startTime() {
		return microtime() - this.delay;
	}
}


class Sync {
	var next_id;
	var n_ids;
	var _ok;
	var id;
	var mutex;

	function ok() 
	{
		this.mutex.lock();
		var v = this._ok;	
		this.mutex.unlock();
		return v;
	}

	function nok() 
	{
		this.mutex.lock();
		this._ok = false;
		this.mutex.unlock();
	}

	function getId()
	{
		
		this.mutex.lock();
		var _id;		
		_id = this.id;
		++this.id;
		this.mutex.unlock();

		return _id;
	}
	
	function Sync(n_ids) {
		this._ok = true;
		this.mutex = Mutex.new();
		this.next_id = 0;
		this.id = 0;
		this.n_ids = n_ids;
	}
}


class Clocks {
	var mw;
	var threads;
	var sync;

	function Clock(x, y, sleep_time) {		
		this.mw = NCurses.new(sleep_time);
		
		this.sync = Sync.new(4);

		this.mw.noEcho(); 
		this.mw.enableKeyPad();
		
		this.mw.printStr(0, 0, "Press 'q' to quit...");
		
		this.threads = [Thread.new(print_time, this.mw, x, y, Time.new(0), this.sync),
 
						Thread.new(print_time, this.mw, x + 1, y, Time.new(3), this.sync),

						Thread.new(print_time, this.mw, x + 2, y, Time.new(6), this.sync),

						Thread.new(print_time, this.mw, x + 3, y, Time.new(9), this.sync),
						
						Thread.new(get_key, this.mw, this.sync)];
	}
	
	function run() {
		this.threads.each(
			function(z) {
				z.start();
			}
		);
	}

	function wait() {
		this.threads.each(
			function(z) {
				z.wait();
			}
		);
	}
}

var c = Clocks.new(5, 5, 1000);

c.run();
c.wait();


